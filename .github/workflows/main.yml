name: Main foodgram workflow
on: [push, workflow_dispatch]

jobs:

  test_backend:
    runs-on: ubuntu-latest
    # strategy
    #   matrix:

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r ./backend/requirements.testing.txt
          pip install -r ./backend/requirements.txt

      - name: Style testing
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          ruff check

  build_and_push_backend_to_dockerhub:
    runs-on: ubuntu-latest
    needs: test_backend
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to dockerhub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME}}/foodgram-backend:latest

  build_and_push_frontend_to_dockerhub:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to dockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_to_dockerhub
      - build_and_push_frontend_to_dockerhub
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Create .env
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          envkey_DJANGO_SECRET: ${{ secrets.DJANGO_SECRET }}
          envkey_DJANGO_DEBUG: ${{ secrets.DJANGO_DEBUG }}
          envkey_USE_SQLITE: ${{ secrets.USE_SQLITE }}
      
      - name: Copy production config to server via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.producion.yml,.env"
          target: "projects/foodgram"
      
      - name: Copy nginx conf to server via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.producion.yml,.env,nginx/nginx.conf"
          target: "projects/foodgram/nginx"

      - name: Execute remote commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd projects/foodgram
            sudo docker compose -f docker-compose.production.yml pull
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /static/static/

  send_build_telegram_report:
    runs-on: ubuntu-latest
    needs:
      - build_and_push_backend_to_dockerhub
      - build_and_push_frontend_to_dockerhub

    steps:
    - name: Send success build report
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_ID }}
        token: ${{ secrets.TG_TOKEN }}
        message: Проект foodgram успешно собран!

    - name: Send commit details
      if: github.event_name == 'push'
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_ID }}
        token: ${{ secrets.TG_TOKEN }}
        message: |
          ${{ github.actor }}: ${{ github.event.head_commit.message }}
          [https://github.com/${{ github.repository }}/commit/${{ github.sha }}]
  
  send_deploy_telegram_report:
    runs-on: ubuntu-latest
    needs:
      - deploy

    steps:
    - name: Send success build report
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_ID }}
        token: ${{ secrets.TG_TOKEN }}
        message: Проект foodgram успешно задеплоен на сервер!
